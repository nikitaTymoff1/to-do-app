{"version":3,"sources":["logo.svg","components/ToDoItem.jsx","components/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ToDoItem","props","className","type","checked","data","completed","onChange","updateTask","id","number","task","src","alt","width","onClick","deleteTask","ToDoList","state","tasks","handleChange","bind","this","map","item","index","key","maxLength","value","addTask","React","Component","App","getTasks","fetch","window","location","hostname","then","res","json","setState","catch","err","console","log","text","method","mode","cache","credentials","e","target","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.daedddd5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\nimport './ToDoItem.css'\n\nfunction ToDoItem(props) {\n    return (\n        <div className='todo-item'>\n            <input type='checkbox'\n                   checked={props.data.completed}\n                   onChange={() => props.updateTask(props.data.id, props.number)}\n\n            />\n            <p className='text'>{props.data.task}</p>\n            <img src=\"trash.png\"\n                 className='trash'\n                 alt=\"trash\"\n                 width='19px'\n                 onClick={() => props.deleteTask(props.data.id)}/>\n        </div>\n    )\n}\n\nexport default ToDoItem","import React from 'react'\nimport ToDoItem from \"./ToDoItem\";\nimport './ToDoList.css'\nimport logo from \"../logo.svg\";\n\nclass ToDoList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: this.props.data\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(id) {\n        // this.setState(prevState => {\n        //     const updatedTasks = prevState.tasks.map(todo => {\n        //         if (todo.id === id) {\n        //             todo.completed = !todo.completed\n        //         }\n        //         return todo\n        //     });\n        //     return {\n        //         tasks: updatedTasks\n        //     }\n        // }\n    }\n\n    render() {\n        return (\n            <div className='todo-app'>\n                <div className='todo-list'>\n                    {this.props.data.map((item, index) => {\n                        return <ToDoItem data={item}\n                                         key={item.id}\n                                         handleChange={this.handleChange}\n                                         deleteTask={this.props.deleteTask}\n                                         updateTask={this.props.updateTask}\n                                         number={index}\n                        />\n                    })}\n                </div>\n                <div className='addition'>\n                    <input\n                        type=\"text\"\n                        maxLength=\"55\"\n                        value={this.props.value}\n                        onChange={this.props.handleChange}\n                    />\n                    <div className='submit' onClick={this.props.addTask}>Add</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ToDoList","import React from 'react';\nimport './App.css';\nimport ToDoList from \"./components/ToDoList\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            task: {\n                text: 'sample',\n                completed: false,\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.getTasks()\n    }\n\n    getTasks = () => {\n        fetch(`http://${window.location.hostname}:4000/tasks`)\n            .then(res => res.json())\n            .then(data => {\n                this.setState({data: data})\n            })\n            .catch(err => console.log(err))\n    };\n    addTask = () => {\n        fetch(`http://${window.location.hostname}:4000/add?task=${this.state.task.text}`, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n        })\n            .then(this.getTasks)\n            .catch(err => console.log(err));\n    };\n    updateTask = (id, number) => {\n        fetch(`http://${window.location.hostname}:4000/update?completed=${!this.state.data[number].completed}&id=${id}`, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n        })\n            .then(this.getTasks)\n            .catch(err => console.log(err));\n    };\n    deleteTask = (id) => {\n        fetch(`http://${window.location.hostname}:4000/delete?id=${id}`)\n            .then(this.getTasks)\n            .catch(err => console.log(err))\n    };\n\n    handleChange = (e) => {\n        this.setState({task: {text: e.target.value}})\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <ToDoList\n                    data={this.state.data}\n                    deleteTask={this.deleteTask}\n                    updateTask={this.updateTask}\n                    value={this.state.task.text}\n                    handleChange={this.handleChange}\n                    addTask={this.addTask}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}